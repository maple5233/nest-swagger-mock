// eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
const rules = require('./eslint-rules')

module.exports = {
  root: true,
  env: {
    jest: true,
    es2021: true,
    'jest/globals': true,
    node: true,
  },
  globals: {
    // ECMAScript
    ArrayBuffer: 'readonly',
    Atomics: 'readonly',
    BigInt: 'readonly',
    BigInt64Array: 'readonly',
    BigUint64Array: 'readonly',
    DataView: 'readonly',
    Float32Array: 'readonly',
    Float64Array: 'readonly',
    Int16Array: 'readonly',
    Int32Array: 'readonly',
    Int8Array: 'readonly',
    Map: 'readonly',
    Promise: 'readonly',
    Proxy: 'readonly',
    Reflect: 'readonly',
    Set: 'readonly',
    SharedArrayBuffer: 'readonly',
    Symbol: 'readonly',
    Uint16Array: 'readonly',
    Uint32Array: 'readonly',
    Uint8Array: 'readonly',
    Uint8ClampedArray: 'readonly',
    WeakMap: 'readonly',
    WeakSet: 'readonly',
    globalThis: 'readonly',
    Intl: 'readonly',
    // Web Standard
    TextDecoder: 'readonly',
    TextEncoder: 'readonly',
    URL: 'readonly',
    URLSearchParams: 'readonly',
    WebAssembly: 'readonly',
    clearInterval: 'readonly',
    clearTimeout: 'readonly',
    console: 'readonly',
    queueMicrotask: 'readonly',
    setInterval: 'readonly',
    setTimeout: 'readonly',
    // Node.js
    Buffer: 'readonly',
    GLOBAL: 'readonly',
    clearImmediate: 'readonly',
    global: 'readonly',
    process: 'readonly',
    root: 'readonly',
    setImmediate: 'readonly',
    __dirname: 'readonly',
    __filename: 'readonly',
    exports: 'writable',
    module: 'readonly',
    require: 'readonly',
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    sourceType: 'module',
    ecmaVersion: 2021,
    project: ['./tsconfig.eslint.json'],
  },
  ignorePatterns: ['**/dist/**/*.js', '**/coverage/**/*.js'],
  plugins: [
    '@typescript-eslint/eslint-plugin',
    'import',
    'unused-imports',
    'prettier',
    'filenames',
    'jest',
    'node',
  ],
  rules,
  overrides: [
    {
      files: ['**/__test__/**/*.spec.ts', '**/__test__/**/*.e2e-spec.ts'],
      rules: {
        ...rules,
        // In unit tests, sometimes we want to access private/protected properties for testing
        '@typescript-eslint/dot-notation': [
          'error',
          {
            allowPrivateClassPropertyAccess: true,
            allowProtectedClassPropertyAccess: true,
            allowIndexSignaturePropertyAccess: true,
          },
        ],
      },
    },
  ],
}
